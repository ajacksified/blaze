@model Blaze.Models.HomeModel
@{
    ViewBag.Title = "Campfire Client";
}
<div id="login-form" class="hide">
    <form>
    <div class="modal">
        <div class="modal-header">
            <h3>
                CampFire Login</h3>
        </div>
        <div class="modal-body">
            <div class="clearfix">
                <div class="input">
                    <input type="text" data-bind="value:username" placeholder="Username" />
                </div>
            </div>
            <div class="clearfix">
                <div class="input">
                    <input type="password" data-bind="value:password" placeholder="Password" />
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <a href="#" class="btn" data-bind="click: login">Login</a>
        </div>
    </div>
    </form>
</div>
<div id="main" class="hide">
    <ul class="tabs" data-tabs="tabs" id="tabs">
        <li class="active"><a href="#lobby">lobby</a></li>
        <!-- ko foreach: activeRooms -->
        <li><a data-bind="attr: {href: domId}, text: name"></a></li>
        <!-- /ko -->
    </ul>
    <div id="my-tab-content" class="tab-content">
        <div class="active tab-pane" id="lobby">
            <h3>
                Chat Rooms</h3>
            <div class="row rooms" data-bind="foreach: rooms">
                <div class="span-one-third room-summary">
                    <h5>
                        <a data-bind="attr: { href: url}, text: name, click: $parent.displayRoom"></a>
                    </h5>
                    <p>
                        <small data-bind="text: topic"></small>
                    </p>
                    <ul data-bind="foreach: users">
                        <li data-bind="text: name"></li>
                    </ul>
                    <br />
                </div>
            </div>
        </div>
        <div class="tab-pane" id="room">
            <div class="row">
                <div class="messages" style="float: left; width: 80%" data-bind="foreach: messages">
                    <div class="message" data-bind="visible: type()=='TextMessage'">
                        <div class="author" data-bind="text: username, css: {starred: starred}">
                        </div>
                        <div class="body" data-bind="html: parsed_body">
                        </div>
                    </div>
                    <div class="message paste" data-bind="visible: type()=='PasteMessage'">
                        <div class="author" data-bind="text: username, css: {starred: starred}">
                        </div>
                        <pre class="body" data-bind="html: body">
                        </pre>
                    </div>
                    <div class="enter-message" data-bind="visible: type()=='EnterMessage'">
                        <span data-bind="text: username"></span>&nbsp;has entered the room
                    </div>
                    <div class="exit-message" data-bind="visible: type()=='KickMessage'">
                        <span data-bind="text: username"></span>&nbsp;has left the room
                    </div>
                    <div class="timestamp-message" data-bind="visible: type()=='TimestampMessage', text: nice_created">
                    </div>
                </div>
                <div style="float: left; width: auto;">
                    <h4 data-bind="text: name">
                        stuff
                    </h4>
                    <p>
                        <small data-bind="text: topic">stuff</small>
                    </p>
                </div>
                <div style="clear: both;">
                </div>
            </div>
            <div class="row">
                <div class="span16 input-area">
                    <textarea rows="3" class="span10" placeholder="type a message and press [enter]"
                        data-bind="value: input_message"></textarea>
                    <button class="btn" data-bind="click: sendMessage">
                        Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .room-summary:nth-child(3n+1)
    {
        clear: left;
    }
    .input-area
    {
        padding-top: 5px;
    }
    .messages
    {
        height: 800px;
        overflow-x: hidden;
        overflow-y: scroll;
    }
    .message
    {
        padding: 4px;
        clear: both;
    }
    .enter-message
    {
        background-color: lightgreen;
        text-align: center;
        clear: both;
    }
    .exit-message
    {
        background-color: lightcoral;
        text-align: center;
        clear: both;
    }
    .timestamp-message
    {
        background-color: #eee;
        text-align: center;
        clear: both;
    }
    .author
    {
        font-weight: bold;
        float: left;
        width: auto;
        max-width: 100px;
    }
    .body
    {
        float: right;
        width: 90%;
    }
    .paste .body
    {
        font-size: 11px;
        background-color: #fdf5d9;
    }
    .emoji
    {
        width: 24px;
        height: 24px;
    }
</style>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.linkify.1.0-min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/models.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/api.js")"></script>
<script type="text/javascript">
    var userCache = {};
    var campfire = new Campfire();

    $(function () {        
        var authToken = $.cookie('authtoken');
        if (!authToken)
            showLogin();
        else {
            campfire.authToken = authToken;
            showRooms();
        }
    });

    function showLogin() {
        $('#login-form').show();
        var loginModel = {
            username: ko.observable(''),
            password: ko.observable(''),
            login: function () {
                var self = this;
                campfire.login(self.username(), self.password(), function(authToken) {
                    $.cookie('authtoken', authToken, { expires: 1 });
                    $('#login-form').hide();
                    showRooms();
                });                
            }
        };
        ko.applyBindings(loginModel, document.getElementById('login-form'));
    }
    
    function showRooms() {
        $('#main').show();

        var roomsModel = new RoomsModel();
        var loadUsers = function (room) {
            campfire.getUsers(room.id(), function(users) {
                $.map(users, function (o) {
                    var userModel = new UserModel(o);
                    room.users.push(userModel);
                    userCache[userModel.id()] = userModel;
                });
                roomsModel.rooms.sort(function(l, r) {
                    if (l.users().length == r.users().length) return 0;
                    if (l.users().length < r.users().length) return 1;
                    return -1;
                });
            });            
        };

        ko.applyBindings(roomsModel, document.getElementById('lobby'));
        ko.applyBindings(roomsModel, document.getElementById('tabs'));
        campfire.getRooms(function(rooms) {
            $.map(rooms, function(o) {
                var roomModel = new RoomModel(o);
                roomsModel.rooms.push(roomModel);
                loadUsers(roomModel);
            });            
        });        
    }   
    
    function showRoom(room) {
        if($(room.domId()).length == 0) {
            var roomDom = $('#room').clone();
            roomDom.attr('id', 'room-' + room.id());
            $('#room').parent().append(roomDom);

            $(roomDom).each(function(i, r) {
                 ko.applyBindings(room, r);
            });
            loadMessages(room, true);
        }
    }
    
    function loadMessages(room, autorefresh) {
        campfire.getRecentMessages(room.id(), room.lastMessageId, function(messages) {
            $.map(messages, function(o) {
                var user = o.user_id ? getUser(o.user_id) : new UserModel({ id: 0, name: '' });
                var messageModel = new MessageModel(o, user);
                room.messages.push(messageModel);
                room.lastMessageId = messageModel.id();
            });
            $('.messages').linkify();
            if( autorefresh === true ) {
                room.timer = setTimeout(function() {
                    loadMessages(room, true);
                }, room.refreshRate());
            }
        });
    }

    function getUser(id) {
        if (userCache[id] !== undefined) {
            return (userCache[id]);
        } else {
            var model = new UserModel({ id: id, name: '' });
            userCache[id] = model;
            campfire.getUser(id, function (user) {
                model.name(user.name);
            });
            return model;
        }
    }
    function processBody(body) {
        if( !body ) return null;
        var re = new RegExp(":[a-z0-9]+:", "ig");
        var match;
        var newBody = '';
        var curIndex = 0;
        while(match = re.exec(body)) {
            newBody += body.substring(curIndex, match.index);
            curIndex = match.index + match[0].length;
            var emoji = emojis[match[0]];
            if( emoji !== undefined ) {
                newBody += '<img class="emoji" src="' + emoji + '"/>';
            } else {
                newBody += match[0];
            }
        }
        newBody += body.substring(curIndex, body.length);
        return newBody;
    }
    
    function sendMessage(room, message) {
        campfire.sendMessage(room.id(), message, function () {
            loadMessages(room);    
        });        
    }
    
    var emojis = {
        @foreach (var e in Model.Emojis)
        {
        <text>'@e.Name':'@e.ImageUrl',</text>
        }
    };

</script>
