@model Blaze.Models.HomeModel
@{
    ViewBag.Title = "Campfire Client";
}
<div id="login-form" class="hide">
    <form>
    <div class="modal">
        <div class="modal-header">
            <h3>
                CampFire Login</h3>
        </div>
        <div class="modal-body">
            <div class="clearfix">
                <div class="input">
                    <input type="text" data-bind="value:account" placeholder="Account Name" />
                </div>
            </div>
            <div class="clearfix">
                <div class="input">
                    <input type="text" class="username" data-bind="value:username" placeholder="Username" />
                </div>
            </div>
            <div class="clearfix">
                <div class="input">
                    <input type="password" class="password" data-bind="value:password" placeholder="Password" />
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <a href="#" class="btn" data-bind="click: login">Login</a>
        </div>
    </div>
    </form>
</div>
<div class="header-wrap hide">
    <div class="header-container">
        <div id="tabs" class="header">
            <ul class="tabs" data-tabs="tabs">
                <li class="active"><a href="#lobby">Lobby</a></li>
                <!-- ko foreach: activeRooms -->
                <li><a data-bind="attr: {href: domId}, text: name"></a></li>
                <!-- /ko -->
            </ul>
        </div>
    </div>
</div>
<div id="ie6-container-wrap" class="tab-content hide">
    <div class="chatcontainer active tab-pane" id="lobby">
        <div class="content">
        <h3>
            Chat Rooms</h3>
            <div class="row rooms" data-bind="foreach: rooms">
                <div class="span-one-third room-summary">
                    <h5>
                        <a data-bind="attr: { href: url}, text: name, click: $parent.displayRoom"></a>
                    </h5>
                    <p>
                        <small data-bind="text: topic"></small>
                    </p>
                    <ul data-bind="foreach: users">
                        <li data-bind="text: name"></li>
                    </ul>
                    <br />
                </div>
            </div>
        </div>
    </div>
    <div id="room" class="tab-pane">
        <div class="chatcontainer">
            <div class="content" data-bind="foreach: messages">
                <div data-bind="attr: {'class':css_class}, css: {me: $root.currentUserId() === userId()}">
                    <div class="author" data-bind="text: username, css: {starred: starred}">
                    </div><div class="body" data-bind="html: parsed_body">
                    </div>
                </div>
            </div>
            <div class="sidebar">
                <h4 data-bind="text: name">
                    stuff
                </h4>
                <p>
                    <small data-bind="text: topic">stuff</small>
                </p>
            </div>
        </div>
        <div class="footer-wrap">
            <div class="footer-container">
                <div class="footer">
                    <textarea rows="3" class="span10" placeholder="type a message and press [enter]"
                        data-bind="value: input_message"></textarea>
                    <button class="btn" data-bind="click: sendMessage">
                        Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .content {
        padding-left: 20px;
        padding-right: 20px;
    }
    .room-summary:nth-child(3n+1)
    {
        clear: left;
    }
    .input-area
    {
        padding-top: 5px;
    }
    .messages
    {
        overflow-x: hidden;
        overflow-y: scroll;
    }
    .emoji
    {
        width: 24px;
        height: 24px;
    }
    .message
    {
        border-bottom: dotted #eee 1px;
        margin: 4px;
        clear: both;
    }
    .message .body
    {
        display: inline-block;
        vertical-align: top;
        width: 80%;
    }
    
    .message .body > a
    {
        vertical-align: top;
    }
    
    .message .author
    {
        vertical-align: top;
        font-weight: bold;
        display: inline-block;
        width: auto;
        max-width: 100px;
        width: 100px;
    }
    
    .paste .body
    {
        font-size: 11px;
        background-color: #fdf5d9;
    }
    
    .me
    {
        background-color: #fdf5d9;
    }
    
    .enter-message .author, .enter-message .body
    {
        /*    background: -webkit-gradient(linear, 0 0, 0 100%, from(#d4e884), to(#a2f90f));
        background: -moz-linear-gradient(#d4e884, #a2f90f);
        background: -o-linear-gradient(#d4e884, #a2f90f);
        background: linear-gradient(#d4e884, #a2f90f);*/
        background-color: lightgreen;
        max-width: inherit;
        float: none;
        display: inline;
    }
    
    .exit-message .author, .exit-message .body
    {
        background-color: #FCC3C3;
        max-width: inherit;
        float: none;
        display: inline;
    }
    
    .exit-message, .enter-message
    {
        text-align: center;
        clear: both;
    }
    
    .exit-message .author, .enter-message .author
    {
        padding: 1px 0px 1px 10px;
        border-radius: 5px 0px 0px 5px;
        -webkit-border-radius: 5px 0px 0px 5px;
        -moz-border-radius: 5px 0px 0px 5px;
    }
    
    .exit-message .body, .enter-message .body
    {
        padding: 1px 10px 1px 0px;
        border-radius: 0px 5px 5px 0px;
        -webkit-border-radius: 0px 5px 5px 0px;
        -moz-border-radius: 0px 5px 5px 0px;
    }
    
    .timestamp-message
    {
        background-color: #eee;
        text-align: center;
        clear: both;
    }
    .timestamp-message .body
    {
        background-color: #eee;
        text-align: center;
        clear: both;
        width: 100%;
    }
    .timestamp-message .author
    {
        display: none;
    }
</style>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.linkify.1.0-min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.youtube.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/models.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/api.js")"></script>
<script type="text/javascript">
    var userCache = {};
    var campfire = new Campfire();
    
    $(function () {        
        var authToken = $.cookie('authtoken');
        var account = $.cookie('account');
        if (!authToken || !account)
            showLogin();
        else {
            campfire.authToken = authToken;
            campfire.setAccount(account);
            campfire.login(account, campfire.authToken, 'x', function(user) {
                showRooms(user);
            });            
        }
    });

    function showLogin() {
        $('#login-form').show();
        var loginModel = {
            username: ko.observable(''),
            password: ko.observable(''),
            account: ko.observable(''),
            login: function () {
                var self = this;
                campfire.login(self.account(), self.username(), self.password(), function(user) {
                    $.cookie('authtoken', user.api_auth_token, { expires: 1 });
                    $.cookie('account', self.account(), { expires: 1 });
                    $('#login-form').hide();
                    showRooms(user);
                });                
            }
        };
        ko.applyBindings(loginModel, document.getElementById('login-form'));
    }
    
    function showRooms(user) {
        $('.header-wrap').show();
        $('#ie6-container-wrap').show();
        var currentUserModel = new UserModel(user);
        userCache[currentUserModel.id()] = currentUserModel;

        var roomsModel = new RoomsModel();
        var loadUsers = function (room) {
            campfire.getUsers(room.id(), function(users) {
                room.users.removeAll();
                $.map(users, function (o) {
                    var userModel = new UserModel(o);
                    room.users.push(userModel);
                    userCache[userModel.id()] = userModel;
                });
                roomsModel.rooms.sort(function(l, r) {
                    if( l.users().length == r.users().length ) return 0;
                    if( l.users().length < r.users().length) return 1;
                    return -1;
                });
                setTimeout(function() {
                    loadUsers(room);
                }, 30000);
            });            
        };

        ko.applyBindings(roomsModel, document.getElementById('lobby'));
        ko.applyBindings(roomsModel, document.getElementById('tabs'));
        campfire.getRooms(function(rooms) {
            $.map(rooms, function(o) {
                var roomModel = new RoomModel(o, currentUserModel);
                roomsModel.rooms.push(roomModel);
                loadUsers(roomModel);
            });            
        });        
    }   
    
    function showRoom(room) {
        if($(room.domId()).length == 0) {
            var roomDom = $('#room').clone();
            roomDom.attr('id', 'room-' + room.id());
            $('#room').parent().append(roomDom);

            $(roomDom).each(function(i, r) {
                 ko.applyBindings(room, r);
            });
            loadMessages(room, true);
        }
    }
    
    function loadMessages(room, autorefresh) {
        campfire.getRecentMessages(room.id(), room.lastMessageId, function(messages) {
            $.map(messages, function(o) {
                var user = o.user_id ? getUser(o.user_id) : new UserModel({ id: 0, name: '' });
                var messageModel = new MessageModel(o, user);
                room.messages.push(messageModel);
                room.lastMessageId = messageModel.id();
            });
            $('.content').linkify();
            if( autorefresh === true ) {
                room.timer = setTimeout(function() {
                    loadMessages(room, true);
                }, room.refreshRate());
            }
        });
    }

    function getUser(id) {
        if (userCache[id] !== undefined) {
            return (userCache[id]);
        } else {
            var model = new UserModel({ id: id, name: '' });
            userCache[id] = model;
            campfire.getUser(id, function (user) {
                model.name(user.name);
            });
            return model;
        }
    }
    function processBody(body) {
        if( !body ) return null;
        $.each(parsers, function(i, p) {
            body = p(body);
        });        
        return body;        
    }
    
    function processEmoji(body) {
        return body.replace( /:[a-z0-9]+:/ig , function(str) {
            var emoji = emojis[str];
            if( emoji !== undefined ) {
                return '<img class="emoji" src="' + emoji + '"/>';
            } else {
                return str;
            }
        });
    }
    
    function processYoutube(body) {
        return body.replace( /http:\/\/www.youtube.com\/watch\?v=([^&]+)/ig, function (str) {
            return '<a class="youtube" href="' + str + '" target="_blank"><img src="' + $.jYoutube(str, 'small') + '"/></a>';
        });
    }
    
    var parsers = [
        processEmoji,
        processYoutube
    ];

    function sendMessage(room, message) {
        campfire.sendMessage(room.id(), message, function () {
            loadMessages(room);    
        });        
    }
    
    var emojis = {
        @foreach (var e in Model.Emojis)
        {
        <text>'@e.Name':'@e.ImageUrl',</text>
        }
    };

</script>
